/**
 * Reporting
 * Clearswift Reporting Service API
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 *
 * OpenAPI Generator version: 3.2.3
 *
 * Do not edit the class manually.
 *
 */

(function(factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/ActiveDocument', 'model/DocumentMatch', 'model/InlineObject', 'model/JwtToken', 'model/MatchType', 'model/ServiceStatus', 'model/Status', 'api/AuthenticationApi', 'api/IGApi', 'api/ServiceCheckApi'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('./ApiClient'), require('./model/ActiveDocument'), require('./model/DocumentMatch'), require('./model/InlineObject'), require('./model/JwtToken'), require('./model/MatchType'), require('./model/ServiceStatus'), require('./model/Status'), require('./api/AuthenticationApi'), require('./api/IGApi'), require('./api/ServiceCheckApi'));
  }
}(function(ApiClient, ActiveDocument, DocumentMatch, InlineObject, JwtToken, MatchType, ServiceStatus, Status, AuthenticationApi, IGApi, ServiceCheckApi) {
  'use strict';

  /**
   * Clearswift_Reporting_Service_API.<br>
   * The <code>index</code> module provides access to constructors for all the classes which comprise the public API.
   * <p>
   * An AMD (recommended!) or CommonJS application will generally do something equivalent to the following:
   * <pre>
   * var Reporting = require('index'); // See note below*.
   * var xxxSvc = new Reporting.XxxApi(); // Allocate the API class we're going to use.
   * var yyyModel = new Reporting.Yyy(); // Construct a model instance.
   * yyyModel.someProperty = 'someValue';
   * ...
   * var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
   * ...
   * </pre>
   * <em>*NOTE: For a top-level AMD script, use require(['index'], function(){...})
   * and put the application logic within the callback function.</em>
   * </p>
   * <p>
   * A non-AMD browser application (discouraged) might do something like this:
   * <pre>
   * var xxxSvc = new Reporting.XxxApi(); // Allocate the API class we're going to use.
   * var yyy = new Reporting.Yyy(); // Construct a model instance.
   * yyyModel.someProperty = 'someValue';
   * ...
   * var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
   * ...
   * </pre>
   * </p>
   * @module index
   * @version 1.0.0
   */
  var exports = {
    /**
     * The ApiClient constructor.
     * @property {module:ApiClient}
     */
    ApiClient: ApiClient,
    /**
     * The ActiveDocument model constructor.
     * @property {module:model/ActiveDocument}
     */
    ActiveDocument: ActiveDocument,
    /**
     * The DocumentMatch model constructor.
     * @property {module:model/DocumentMatch}
     */
    DocumentMatch: DocumentMatch,
    /**
     * The InlineObject model constructor.
     * @property {module:model/InlineObject}
     */
    InlineObject: InlineObject,
    /**
     * The JwtToken model constructor.
     * @property {module:model/JwtToken}
     */
    JwtToken: JwtToken,
    /**
     * The MatchType model constructor.
     * @property {module:model/MatchType}
     */
    MatchType: MatchType,
    /**
     * The ServiceStatus model constructor.
     * @property {module:model/ServiceStatus}
     */
    ServiceStatus: ServiceStatus,
    /**
     * The Status model constructor.
     * @property {module:model/Status}
     */
    Status: Status,
    /**
     * The AuthenticationApi service constructor.
     * @property {module:api/AuthenticationApi}
     */
    AuthenticationApi: AuthenticationApi,
    /**
     * The IGApi service constructor.
     * @property {module:api/IGApi}
     */
    IGApi: IGApi,
    /**
     * The ServiceCheckApi service constructor.
     * @property {module:api/ServiceCheckApi}
     */
    ServiceCheckApi: ServiceCheckApi
  };

  return exports;
}));
